package com.flf.service.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.base.service.BaseServiceImpl;
import com.flf.entity.ShopUser;
import com.flf.mapper.ShopUserMapper;
import com.flf.service.RedisSpringProxy;
import com.flf.service.ShopUserService;
import com.flf.util.Config;
import com.flf.util.SMSUtil;

/**
 * 
 * <br>
 * <b>功能：</b>ShopUserService<br>
 */
@Service("shopUserService")
public class ShopUserServiceImpl extends BaseServiceImpl implements ShopUserService {
	private final static Logger log = Logger.getLogger(ShopUserServiceImpl.class);

	@Autowired
	private ShopUserMapper dao;
	@Autowired
	private RedisSpringProxy redisSpringProxy;

	public static final String SMS_URL = Config.getSmsProperties("sms.url");
	public static final String SMS_APPKEY = Config.getSmsProperties("sms.appkey");
	public static final String SMS_SECRET = Config.getSmsProperties("sms.secret");
	public static final String SMS_FREE_SIGN_NAME = Config.getSmsProperties("sms.free.sign.name");

	/** 登录短信验证码模版ID */
	public static final String SMS_TEMPLATE_LOGIN_CODE = Config.getSmsProperties("sms.template.login.code");

	@Override
	public ShopUserMapper getDao() {
		return dao;
	}

	@Override
	public ShopUser save(String mobilePhone, String machineNumber, String phoneModel) {
		ShopUser user = new ShopUser();
		user.setName(mobilePhone);
		user.setType(1);
		user.setStatus(0);
		user.setRegisterTime(new Date());
		user.setMachineNumber(machineNumber);
		user.setPhoneModel(phoneModel);
		user.setLastLoginTime(new Date());
		user.setMobilePhone(mobilePhone);
		user.setBalance(BigDecimal.ZERO);
		user.setDeposit(BigDecimal.ZERO);
		user.setRenzhen_status(0);
		user.setUserVip(0);

		dao.add(user);
		return user;
	}

	@Override
	public void updateLoginInfo(Integer id, String machineNumber, String phoneModel) {
		if (id != null && id > 0) {
			ShopUser user = new ShopUser();
			user.setId(id);
			user.setMachineNumber(machineNumber);
			user.setPhoneModel(phoneModel);
			user.setLastLoginTime(new Date());
			dao.updateBySelective(user);
		}
	}

	@Override
	public String getLoginVerificationCode(String mobile) {
		String code = RandomStringUtils.randomNumeric(4);
		log.info("给手机号" + mobile + "生成的验证码:" + code);
		redisSpringProxy.saveEx("login_code_" + mobile, 5 * 60L, code);
		String smsParamString = "{\"code\":\"" + code + "\",\"product\":\"" + SMS_FREE_SIGN_NAME + "\"}";
		return SMSUtil.sendSms(SMS_FREE_SIGN_NAME, smsParamString, SMS_TEMPLATE_LOGIN_CODE, mobile);
	}

	@Override
	public List<Map<String, Object>> listPage(ShopUser vo) {
		return dao.listPage(vo);
	}

	@Override
	public Map<String, Object> queryShopUserInfoById(Integer id) {
		return dao.queryShopUserInfoById(id);
	}

	@Override
	public void updateUserStatus(Integer id) {
		dao.updateUserStatus(id);
	}

	@Override
	public void updateUserMoney(Integer id) {
		dao.updateUserMoney(id);
	}
}
